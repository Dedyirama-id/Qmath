{"version":3,"file":"449.bundle.js","mappings":"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","sources":["webpack://qmath/./node_modules/@firebase/component/dist/esm/index.esm2017.js","webpack://qmath/./node_modules/@firebase/logger/dist/esm/index.esm2017.js","webpack://qmath/./node_modules/idb/build/wrap-idb-value.js","webpack://qmath/./node_modules/idb/build/index.js"],"sourcesContent":["import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* InstantiationMode.LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* InstantiationMode.EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* InstantiationMode.EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n"],"names":["Component","constructor","name","instanceFactory","type","this","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","callback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","resolve","e","promise","getImmediate","options","_a","optional","Error","getComponent","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","delete","services","Array","from","values","Promise","all","filter","service","map","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","undefined","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","Date","toISOString","Logger","_logLevel","_logHandler","_userLogHandler","push","val","TypeError","setLogLevel","logHandler","userLogHandler","debug","log","info","warn","error","instanceOfAny","object","constructors","some","c","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","target","prop","receiver","IDBTransaction","objectStoreNames","objectStore","value","wrapFunction","func","IDBDatabase","prototype","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","apply","unwrap","storeNames","tx","call","sort","transformCachableValue","done","reject","unlisten","removeEventListener","complete","DOMException","addEventListener","cacheDonePromiseForTransaction","IDBObjectStore","IDBIndex","Proxy","IDBRequest","request","success","result","then","catch","promisifyRequest","newValue","openDB","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","db","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","replace","useIndex","isWrite","method","async","storeName","store","index","shift","oldTraps"],"sourceRoot":""}